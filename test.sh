#!/bin/bash
#
# Test rapide du service php_archives apr√®s correction
# Valide que le script d'installation peut fonctionner
#

echo "========================================================================"
echo "üß™ TEST RAPIDE SERVICE PHP_ARCHIVES APR√àS CORRECTION"
echo "========================================================================"
echo ""

# V√©rifier privil√®ges root
if [ "$EUID" -ne 0 ]; then
    echo "‚ùå Ce script doit √™tre ex√©cut√© en tant que root"
    exit 1
fi

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BASE_DIR="$SCRIPT_DIR"

# Charger les fonctions communes pour tester
if [ -f "scripts/common/variables.sh" ]; then
    source scripts/common/variables.sh
    echo "‚úÖ variables.sh charg√©"
else
    echo "‚ùå variables.sh non trouv√©"
    exit 1
fi

if [ -f "scripts/common/logging.sh" ]; then
    source scripts/common/logging.sh
    echo "‚úÖ logging.sh charg√©"
else
    echo "‚ùå logging.sh non trouv√©"
    exit 1
fi

if [ -f "scripts/common/packages.sh" ]; then
    source scripts/common/packages.sh
    echo "‚úÖ packages.sh charg√©"
else
    echo "‚ùå packages.sh non trouv√©"
    exit 1
fi

echo ""
echo "üîç TESTS DE VALIDATION :"

# Test 1 : V√©rifier que php_archives est dans SERVICES_LIST
echo -n "‚Ä¢ Service php_archives dans SERVICES_LIST : "
if printf '%s\n' "${SERVICES_LIST[@]}" | grep -q "php_archives"; then
    echo "‚úÖ OUI"
else
    echo "‚ùå NON"
fi

# Test 2 : V√©rifier que le dossier web_files existe
echo -n "‚Ä¢ Dossier web_files/ pr√©sent : "
if [ -d "$BASE_DIR/web_files" ]; then
    echo "‚úÖ OUI"
else
    echo "‚ùå NON"
fi

# Test 3 : V√©rifier archives-list.php
echo -n "‚Ä¢ Fichier archives-list.php pr√©sent : "
if [ -f "$BASE_DIR/web_files/archives-list.php" ]; then
    echo "‚úÖ OUI"
else
    echo "‚ùå NON"
fi

# Test 4 : V√©rifier download-archive.php
echo -n "‚Ä¢ Fichier download-archive.php pr√©sent : "
if [ -f "$BASE_DIR/web_files/download-archive.php" ]; then
    echo "‚úÖ OUI"
else
    echo "‚ùå NON"
fi

# Test 5 : V√©rifier syntaxe du script d'installation
echo -n "‚Ä¢ Script php_archives_install.sh syntaxe : "
if [ -f "scripts/install/php_archives_install.sh" ]; then
    if bash -n scripts/install/php_archives_install.sh 2>/dev/null; then
        echo "‚úÖ VALIDE"
    else
        echo "‚ùå ERREUR DE SYNTAXE"
    fi
else
    echo "‚ùå FICHIER MANQUANT"
fi

# Test 6 : V√©rifier que nginx est install√© (pr√©requis)
echo -n "‚Ä¢ Nginx install√© (pr√©requis) : "
if command -v nginx >/dev/null 2>&1; then
    echo "‚úÖ OUI"
else
    echo "‚ùå NON (installer d'abord nginx_install.sh)"
fi

# Test 7 : V√©rifier que packages.list contient php
echo -n "‚Ä¢ Section php dans packages.list : "
if [ -f "scripts/common/packages.list" ]; then
    if grep -q "^php:" scripts/common/packages.list; then
        echo "‚úÖ OUI"
    else
        echo "‚ùå NON (ajouter section php)"
    fi
else
    echo "‚ùå FICHIER MANQUANT"
fi

echo ""
echo "========================================================================"
echo "üí° PROCHAINES √âTAPES :"
echo ""
echo "Si tous les tests sont ‚úÖ :"
echo "1. Tester l'installation : sudo scripts/install/php_archives_install.sh"
echo "2. V√©rifier le statut : cat /var/lib/maxlink/services_status.json"
echo "3. Tester les URLs :"
echo "   curl http://localhost/archives-list.php"
echo "   curl http://localhost/download-archive.php"
echo ""
echo "Si il y a des ‚ùå :"
echo "‚Ä¢ Corriger les probl√®mes identifi√©s"
echo "‚Ä¢ Relancer ce test jusqu'√† avoir tout en ‚úÖ"
echo ""